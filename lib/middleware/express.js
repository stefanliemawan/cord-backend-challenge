import bodyParser from "body-parser";

export default function (app) {
  app.set("port", process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}

var rules = require("./rules.json");

function checkPropertyType(res, name, type, obj, itemType = "string") {
  if (type == "integer") type = "number";

  if (type == "array") {
    if (name in obj) {
      var arr = obj[key];
      if (itemType == "integer") itemType = "number";
      if (Array.isArray(arr)) {
        for (var i = 0; i < arr.length; i++) {
          if (typeof arr[i] != itemType)
            res
              .status(400)
              .send(name + " must be an array consisting of strings");
        }
      } else res.status(400).send(name + " must be an array");
    }
  } else if (name in obj && typeof obj[name] != type)
    res.status(400).send(name + " must be a " + type);
}

function checkPropertiesType(res, rulesProperties, obj) {
  if (rulesProperties.length == 1) {
    for (const [key, value] of Object.entries(rulesProperties)) {
      var type = value["type"];
      checkPropertyType(res, key, type, obj);
    }
  } else if (rulesProperties.length > 1) {
    for (var i = 0; i < rulesProperties.length; i++) {
      var name = rulesProperties[i]["name"];
      var type = rulesProperties[i]["type"];

      if (name in obj) {
        if (type == "integer") obj[name] = parseInt(obj[name]);

        console.log(name, obj);

        if (type == "array") {
          var itemType = rulesProperties[i]["items"]["type"];
          checkPropertyType(res, name, type, obj, itemType);
        } else checkPropertyType(res, name, type, obj);
      }
    }
  }
}

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstRules = (req, res, next) => {
  // TBD

  // req.accepts('application/json')

  var route = req.originalUrl.split("?")[0];
  if (route[route.length - 1] == "/") route = route.slice(0, route.length - 1);
  var method = req.method.toLowerCase();

  console.log(route);
  console.log(method);

  var parameters = rules["paths"][route][method]["parameters"];

  switch (route) {
    case "/api/account/role":
      if (method != "get") res.status(400).send("Wrong method");
      if (Object.keys(req.params).length != 0)
        res.status(400).send("Parameters should be empty");
      break;
    case "/api/account/profile":
      if (method != "put") res.status(400).send("Wrong method");
      var body = req.body;
      var bodyLength = Object.keys(body).length;
      if (bodyLength == 0) res.status(400).send("Body cannot be empty");
      else if (
        bodyLength > 3 ||
        !("name" in body) ||
        !("job_title" in body) ||
        !("photo_url" in body)
      )
        res.status(400).send("Body properties do not match");

      var bodyProperties = parameters[0]["schema"]["properties"];
      checkPropertiesType(res, bodyProperties, body);

      break;
    case "/api/account/member":
      if (method != "delete") res.status(400).send("Wrong method");

      var body = req.body;
      var bodyLength = Object.keys(body).length;

      if (bodyLength > 1) res.status(400).send("Body properties do not match");

      if (!("account_id" in body))
        res.status(400).send("account_id must be provided");

      var bodyProperties = parameters[0]["schema"]["properties"];
      checkPropertiesType(res, bodyProperties, body);

      break;
    case "/api/account/search":
      if (method != "get") res.status(400).send("Wrong method");

      var query = req.query;

      checkPropertiesType(res, parameters, query);

      break;
  }

  return next();
};
